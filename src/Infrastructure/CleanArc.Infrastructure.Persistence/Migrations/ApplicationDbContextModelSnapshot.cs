// <auto-generated />
using System;
using CleanArc.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CleanArc.Domain.Entities.Order.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.TABLE_UN", b =>
                {
                    b.Property<string>("CODE_TABLE_UN")
                        .HasMaxLength(15)
                        .HasColumnType("nchar(15)")
                        .IsFixedLength();

                    b.Property<string>("COLONNE_DEUX_TABLE_UN")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<string>("COLONNE_QUATRE_TABLE_UN")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<string>("COLONNE_TROIS_TABLE_UN")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<string>("COMPTE_TABLE_UN")
                        .HasMaxLength(15)
                        .HasColumnType("nchar(15)")
                        .IsFixedLength();

                    b.Property<decimal?>("CREDIT_TABLE_UN")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<DateTime?>("DATE_TABLE_UN")
                        .HasColumnType("date");

                    b.Property<decimal?>("DEBIT_TABLE_UN")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<string>("ID_TABLE_UN")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<string>("INTITULE_TABLE_UN")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LIBELLEE_TABLE_UN")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("REF_ADH_TBLE_UN")
                        .HasColumnType("int");

                    b.Property<string>("REF_MFG_ADH_TABLE_UN")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)");

                    b.ToTable("TABLE_UN", (string)null);
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.TContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("ActifContact")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FaxContact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mail1Coontact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mail2Coontact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NomPreContact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PosContact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tel1Contact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tel2Contact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("individuId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("individuId");

                    b.ToTable("TContact");
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.TJ_ACH_EX", b =>
                {
                    b.Property<int>("ID_ACH_EX")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_ACH_EX"));

                    b.Property<string>("ID_ROLE_CIR")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int>("REF_CTR_ACH_EX")
                        .HasColumnType("int");

                    b.Property<int>("REF_IND_ACH_EX")
                        .HasColumnType("int");

                    b.ToTable("TJ_ACH_EX", (string)null);
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.TJ_ADH_WEB", b =>
                {
                    b.Property<DateTime>("DATE_DEBUT_WEB")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DATE_FIN_WEB")
                        .HasColumnType("date");

                    b.Property<int>("ID_WEB")
                        .HasColumnType("int");

                    b.Property<string>("LOGIN_WEB")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("PRE_IND_WEB")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("PWD_WEB")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<int>("REF_IND_WEB")
                        .HasColumnType("int");

                    b.ToTable("TJ_ADH_WEB", (string)null);
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.TJ_CIR", b =>
                {
                    b.Property<int>("ID_CIR")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_CIR"));

                    b.Property<string>("ID_ROLE_CIR")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int>("REF_CTR_CIR")
                        .HasColumnType("int");

                    b.Property<int>("REF_IND_CIR")
                        .HasColumnType("int");

                    b.HasKey("ID_CIR")
                        .HasName("PK_CIR");

                    b.HasIndex("ID_ROLE_CIR");

                    b.HasIndex("REF_IND_CIR");

                    b.HasIndex(new[] { "REF_CTR_CIR", "REF_IND_CIR", "ID_ROLE_CIR" }, "UQ_CIR_CONTRAT_INDIVIDU_ROLE")
                        .IsUnique();

                    b.ToTable("TJ_CIR", (string)null);
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.TJ_DOCUMENT_DET_BORD", b =>
                {
                    b.Property<int>("ID_DOCUMENT_DET_BORD")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_DOCUMENT_DET_BORD"));

                    b.Property<string>("ID_DET_BORD")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("NUM_BORD")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("REF_CTR_DET_BORD")
                        .HasColumnType("int");

                    b.Property<string>("REF_DOCUMENT_DET_BORD")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ID_DOCUMENT_DET_BORD");

                    b.ToTable("TJ_DOCUMENT_DET_BORD", (string)null);
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.TJ_GRP_PERMISSION", b =>
                {
                    b.Property<int>("ID_GRP")
                        .HasColumnType("int");

                    b.Property<int>("ID_PERMISSION")
                        .HasColumnType("int");

                    b.HasKey("ID_GRP", "ID_PERMISSION");

                    b.HasIndex("ID_PERMISSION");

                    b.ToTable("TJ_GRP_PERMISSIONS", (string)null);
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.TJ_LETTRAGE", b =>
                {
                    b.Property<int>("ID_DET_BORD_LET")
                        .HasColumnType("int");

                    b.Property<int>("ID_ENC_LET")
                        .HasColumnType("int");

                    b.Property<DateTime>("DAT_LET")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DAT_RECONCIL")
                        .HasColumnType("date");

                    b.Property<decimal?>("MONT_TTC_LET")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<bool?>("VALIDE_LET")
                        .HasColumnType("bit");

                    b.Property<bool?>("VALIDE_RECONCIL")
                        .HasColumnType("bit");

                    b.HasKey("ID_DET_BORD_LET", "ID_ENC_LET", "DAT_LET")
                        .HasName("PK__TJ_LETTR__219B3A9C0E04126B");

                    b.ToTable("TJ_LETTRAGE", (string)null);
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.TR_ACTPROF_BCT", b =>
                {
                    b.Property<string>("Code_SousClasse")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Code SousClasse");

                    b.Property<string>("Classe")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Code_Activité")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Code Activité");

                    b.Property<string>("Code_Classe")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Code Classe");

                    b.Property<string>("Code_Classe1")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Code Classe1");

                    b.Property<string>("Code_Section")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Code Section");

                    b.Property<string>("Code_SousSection")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Code SousSection");

                    b.Property<string>("Section")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("SousClasse")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("SousSection")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Code_SousClasse");

                    b.ToTable("TR_ACTPROF_BCT", (string)null);
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.TR_Ag_Bq", b =>
                {
                    b.Property<string>("Code_Bq_Ag")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Agence")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Banque")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Code_Ag")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Code_Bq")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Code_Bq_Ag");

                    b.ToTable("TR_Ag_Bq", (string)null);
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.TR_COMM_FACTORING", b =>
                {
                    b.Property<int>("ID_COMM_FACT")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_COMM_FACT"));

                    b.Property<decimal?>("MONT_MIN_CTR_COMM_FACTORING")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<decimal?>("MONT_MIN_DOC_COMM_FACTORING")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<string>("TX_COMM_FACTORING")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .IsFixedLength();

                    b.Property<string>("TYP_COMM_FACTORING")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("char(15)")
                        .IsFixedLength();

                    b.HasKey("ID_COMM_FACT");

                    b.ToTable("TR_COMM_FACTORING", (string)null);
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.TR_CP", b =>
                {
                    b.Property<int>("ID_CP")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_CP"));

                    b.Property<string>("CP")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<string>("Code_Gouvernorat")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<string>("Code_Region")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<string>("Gouvernorat")
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .IsFixedLength();

                    b.Property<string>("Region")
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .IsFixedLength();

                    b.Property<string>("Ville")
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .IsFixedLength();

                    b.HasKey("ID_CP");

                    b.ToTable("TR_CP", (string)null);
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.TR_INT_FINANCEMENT", b =>
                {
                    b.Property<int>("ID_TR_INT_FIN")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_TR_INT_FIN"));

                    b.Property<DateTime?>("DAT_DEB_VALID_INT_FIN")
                        .HasColumnType("date");

                    b.Property<short?>("DELAI_MAX_PAI_INT_FIN")
                        .HasColumnType("smallint");

                    b.Property<decimal?>("MAJOR_INT_INT_FIN")
                        .HasColumnType("decimal(5, 3)");

                    b.Property<decimal?>("PRECOMPTE_INT_FIN")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<decimal?>("TX_INT_MARCHE_INT_FIN")
                        .HasColumnType("decimal(5, 3)");

                    b.Property<decimal?>("TX_MARGE_CTR_INT_FIN")
                        .HasColumnType("decimal(5, 3)");

                    b.Property<string>("TYP_INSTR_INT_FIN")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("char(15)")
                        .IsFixedLength();

                    b.HasKey("ID_TR_INT_FIN");

                    b.ToTable("TR_INT_FINANCEMENT", (string)null);
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.TR_LISTE_FRAIS_DIVER", b =>
                {
                    b.Property<int>("ID_ListeFraisDivers")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_ListeFraisDivers"));

                    b.Property<string>("ABREV_FRAIS_DIVERS")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .IsFixedLength();

                    b.Property<string>("LIB_FRAIS_DIVERS")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal?>("MONT_FRAIS_DIVERS")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<string>("TYPE_FRAIS_DIVERS")
                        .HasMaxLength(20)
                        .HasColumnType("nchar(20)")
                        .IsFixedLength();

                    b.HasKey("ID_ListeFraisDivers");

                    b.ToTable("TR_LISTE_FRAIS_DIVERS", (string)null);
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.TR_LIST_VAL", b =>
                {
                    b.Property<int>("ID_LIST_VAL")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_LIST_VAL"));

                    b.Property<string>("ABR_LIST_VAL")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .IsFixedLength();

                    b.Property<string>("COM_LIST_VAL")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("LIB_LIST_VAL")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("NB_JOUR_LIST_VAL")
                        .HasColumnType("int");

                    b.Property<short?>("ORD_LIST_VAL")
                        .HasColumnType("smallint");

                    b.Property<string>("TYPE_RECOUVREMENT")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TYP_LIST_VAL")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("char(20)")
                        .IsFixedLength();

                    b.HasKey("ID_LIST_VAL")
                        .HasName("PK__TR_LIST___5D96956109A971A2");

                    b.ToTable("TR_LIST_VAL", (string)null);
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.TR_NLDP", b =>
                {
                    b.Property<int>("ID_NLDP")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_NLDP"));

                    b.Property<string>("ABRV_DEVISE")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .IsFixedLength();

                    b.Property<string>("ABRV_LANG")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .IsFixedLength();

                    b.Property<string>("ABRV_NAT")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .IsFixedLength();

                    b.Property<string>("ABRV_PAYS")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .IsFixedLength();

                    b.Property<string>("LIB_DEVISE")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LIB_LANG")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LIB_NT")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LIB_PAYS")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ID_NLDP")
                        .HasName("PK__TR_NLDP__A9D6B5AE32767D0B");

                    b.HasIndex(new[] { "LIB_NT", "ABRV_NAT", "LIB_LANG", "ABRV_LANG", "LIB_DEVISE", "ABRV_DEVISE", "LIB_PAYS", "ABRV_PAYS" }, "UQ_NLDP")
                        .IsUnique()
                        .HasFilter("[LIB_NT] IS NOT NULL AND [ABRV_NAT] IS NOT NULL AND [LIB_LANG] IS NOT NULL AND [ABRV_LANG] IS NOT NULL AND [LIB_DEVISE] IS NOT NULL AND [ABRV_DEVISE] IS NOT NULL AND [LIB_PAYS] IS NOT NULL AND [ABRV_PAYS] IS NOT NULL");

                    b.ToTable("TR_NLDP", (string)null);
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.TR_PARAM_PIECE", b =>
                {
                    b.Property<string>("TYP_PARAM_PIECE")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .IsFixedLength();

                    b.Property<string>("LIB_PARAM_PIECE")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("SIGN_PARAM_PIECE")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength();

                    b.HasKey("TYP_PARAM_PIECE")
                        .HasName("PK__TR_PARAM__596D594EB71BFBC6");

                    b.ToTable("TR_PARAM_PIECE", (string)null);
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.TR_RIB", b =>
                {
                    b.Property<string>("RIB_RIB")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<bool?>("ACTIF_RIB")
                        .HasColumnType("bit");

                    b.Property<int>("REF_IND_RIB")
                        .HasColumnType("int");

                    b.HasKey("RIB_RIB")
                        .HasName("PK__TR_RIB__2CA2FF07803A45B1");

                    b.ToTable("TR_RIB", (string)null);
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.TR_TMM", b =>
                {
                    b.Property<int>("ID_TMM")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_TMM"));

                    b.Property<DateTime?>("DATE_DEBUT_TMM")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DATE_FIN_TMM")
                        .HasColumnType("date");

                    b.Property<decimal?>("TAUX_TMM")
                        .HasColumnType("decimal(6, 4)");

                    b.HasKey("ID_TMM");

                    b.ToTable("TR_TMM", (string)null);
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.TR_TVA", b =>
                {
                    b.Property<short>("ID_TVA")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("ID_TVA"));

                    b.Property<string>("LIB_TVA")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal?>("VAL_TVA")
                        .HasColumnType("decimal(4, 2)");

                    b.HasKey("ID_TVA")
                        .HasName("PK__TR_TVA__27BFF8EE0D7A0286");

                    b.ToTable("TR_TVA", (string)null);
                });

         

            modelBuilder.Entity("CleanArc.Domain.Entities.TS_GRP_USER", b =>
                {
                    b.Property<int>("ID_GRP_USER")
                        .HasColumnType("int");

                    b.Property<bool?>("ACTIF_GRP_USER")
                        .HasColumnType("bit");

                    b.Property<string>("LIB_GRP_USER")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ID_GRP_USER")
                        .HasName("PK__TS_GRP_U__D6346B9A4DDCEA49");

                    b.ToTable("TS_GRP_USER", (string)null);
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.TS_USER", b =>
                {
                    b.Property<int>("ID_USER")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_USER"));

                    b.Property<bool>("ACTIF_USER")
                        .HasColumnType("bit");

                    b.Property<string>("AGENCE_USER")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DIRECTION_USER")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FONCTION_USER")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ID_GRP_USER")
                        .HasColumnType("int");

                    b.Property<string>("LOGIN_USER")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MAIL_USER")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MDP_USER")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MOBILE_USER")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("NOM_USER")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ONE_SIGNAL_PLAYER_ID")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PHOTO_USER")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("PRE_USER")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SERVICE_USER")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TEL_FIXE_USER")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ID_USER")
                        .HasName("PK__TS_USER__95F4844059904A2C");

                    b.HasIndex("ID_GRP_USER");

                    b.HasIndex(new[] { "LOGIN_USER" }, "UQ_USER")
                        .IsUnique();

                    b.ToTable("TS_USER", (string)null);
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.TS_USERS_WEB", b =>
                {
                    b.Property<int>("ID_USER_WEB")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_USER_WEB"));

                    b.Property<bool>("ACTIF_USER_WEB")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DATE_FIN_COMPTE")
                        .HasColumnType("date");

                    b.Property<string>("LOGIN_WEB")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LOGO_WEB")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ONE_SIGNAL_PLAYER_ID")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PASSWORD_WEB")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("REF_IND_WEB")
                        .HasColumnType("int");

                    b.HasKey("ID_USER_WEB");

                    b.ToTable("TS_USERS_WEB", (string)null);
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.T_ADRESSE", b =>
                {
                    b.Property<short>("ID_ADR")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("ID_ADR"));

                    b.Property<bool?>("ACTIF_ADR")
                        .HasColumnType("bit");

                    b.Property<string>("CP_ADR")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<short?>("ID_DELEG_ADR")
                        .HasColumnType("smallint");

                    b.Property<short?>("ID_GOUV_ADR")
                        .HasColumnType("smallint");

                    b.Property<short?>("ID_LOC_ADR")
                        .HasColumnType("smallint");

                    b.Property<short?>("ID_NLDP")
                        .HasColumnType("smallint");

                    b.Property<string>("LIB_ADR")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<int>("REF_IND_ADR")
                        .HasColumnType("int");

                    b.HasKey("ID_ADR")
                        .HasName("PK__T_ADRESS__2A7CD608047AA831");

                    b.HasIndex("REF_IND_ADR");

                    b.ToTable("T_ADRESSE", (string)null);
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.T_AUTRE_F_RELELE", b =>
                {
                    b.Property<int>("ID_AUTRE_F_REL")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_AUTRE_F_REL"));

                    b.Property<string>("ABEV_AUTRE_F_REL")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("DATE_AUTRE_F_REL")
                        .HasColumnType("date");

                    b.Property<decimal?>("MONT_AUTRE_F_REL")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<int?>("REF_CTR_AUTRE_F_REL")
                        .HasColumnType("int");

                    b.Property<string>("nom_ind_AUTRE_F_REL")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("ID_AUTRE_F_REL");

                    b.ToTable("T_AUTRE_F_RELELE", (string)null);
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.T_BCT_RCM00", b =>
                {
                    b.Property<decimal?>("C1_RCM00")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<decimal?>("C2_RCM00")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<decimal?>("C3_RCM00")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<decimal?>("C4_RCM00")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<decimal?>("C5_RCM00")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<decimal?>("C6_RCM00")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<decimal?>("C7_RCM00")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<decimal?>("C8_RCM00")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<string>("Code_RCM00")
                        .IsRequired()
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("varchar(80)");

                    b.Property<DateTime>("Date_RCM00")
                        .HasColumnType("date");

                    b.Property<int>("ID_RCM00")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_RCM00"));

                    b.Property<bool?>("Valide_RCM00")
                        .HasColumnType("bit");

                    b.ToTable("T_BCT_RCM00", (string)null);
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.T_BORDEREAU", b =>
                {
                    b.Property<string>("NUM_BORD")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("REF_CTR_BORD")
                        .HasColumnType("int");

                    b.Property<string>("ANNEE_BORD")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("char(4)")
                        .IsFixedLength();

                    b.Property<DateTime?>("DAT_BORD")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DAT_SAISIE_BORD")
                        .HasColumnType("date");

                    b.Property<string>("DEVISE_ACH")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .IsFixedLength();

                    b.Property<string>("EMETTEUR")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<decimal?>("MONT_TOT_BORD")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<short?>("NB_DOC_BORD")
                        .HasColumnType("smallint");

                    b.Property<int?>("REF_ACH_BORD")
                        .HasColumnType("int");

                    b.Property<int?>("REF_ADH_BORD")
                        .HasColumnType("int");

                    b.Property<bool?>("SOLDE_BORD")
                        .HasColumnType("bit");

                    b.Property<bool?>("VALIDE_BORD")
                        .HasColumnType("bit");

                    b.HasKey("NUM_BORD", "REF_CTR_BORD", "ANNEE_BORD")
                        .HasName("PK__T_BORDER__3DDB9DEBA9209E94");

                    b.ToTable("T_BORDEREAU", (string)null);
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.T_BORD_FACTOR", b =>
                {
                    b.Property<int>("ID_BORD_FACTOR")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_BORD_FACTOR"));

                    b.Property<DateTime?>("DAT_CRE_BORD_FACTOR")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DAT_EDIT_BORD_FACTOR")
                        .HasColumnType("date");

                    b.Property<int?>("ID_ENC_BORD_FACTOR")
                        .HasColumnType("int");

                    b.Property<int?>("ID_FACTOR_BORD_FACTOR")
                        .HasColumnType("int");

                    b.Property<decimal?>("MONT_TOT_BORD_FACTOR")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<string>("NUM_BORD_FACTOR")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("REF_CTR_BORD_FACTOR")
                        .HasColumnType("int");

                    b.Property<string>("REF_ENC_BORD_FACTOR")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("VALID_BORD_FACTOR")
                        .HasColumnType("bit");

                    b.HasKey("ID_BORD_FACTOR");

                    b.ToTable("T_BORD_FACTOR", (string)null);
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.T_BORD_MFG", b =>
                {
                    b.Property<DateTime?>("DATE_BORD_MFG")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DATE_ENVOIE_BORD_MFG")
                        .HasColumnType("date");

                    b.Property<int>("ID_BORD_MFG")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_BORD_MFG"));

                    b.Property<decimal?>("MNT_COMM_HT_BORD_MFG")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<string>("NOM_ADH_BORD_MFG")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("NUM_BORD_MFG")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("REF_ADH_BORD_MFG")
                        .HasColumnType("int");

                    b.Property<int?>("REF_CTR_BORD_MFG")
                        .HasColumnType("int");

                    b.ToTable("T_BORD_MFG", (string)null);
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.T_Bordereau_MFG", b =>
                {
                    b.Property<int?>("Compte_MFG")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Date_Bord_MFG")
                        .HasColumnType("date");

                    b.Property<DateTime?>("Date_Creation_MFG")
                        .HasColumnType("date");

                    b.Property<DateTime?>("Date_Envoie_MFG")
                        .HasColumnType("date");

                    b.Property<bool?>("Flag_MFG")
                        .HasColumnType("bit");

                    b.Property<int>("ID_Bord_MFG")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_Bord_MFG"));

                    b.Property<decimal?>("MONT_FDG_DET_MFG")
                        .HasColumnType("numeric(18, 3)");

                    b.Property<decimal?>("MONT_TTC_DET_MFG")
                        .HasColumnType("numeric(18, 3)");

                    b.Property<decimal?>("Mnt_Finanancement_MFG")
                        .HasColumnType("numeric(18, 3)");

                    b.Property<int?>("Num_Bord_MFG")
                        .HasColumnType("int");

                    b.Property<string>("Ref_ACH_MFG")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Ref_ADH_MFG")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Ref_Doc_MFG")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Type_MFG")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal?>("acc_fourn_adh_MFG")
                        .HasColumnType("numeric(18, 3)");

                    b.ToTable("T_Bordereau_MFG", (string)null);
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.T_CALC_DISPO", b =>
                {
                    b.Property<DateTime?>("DATE__CALC_DISPO")
                        .HasColumnType("date");

                    b.Property<decimal?>("DISPO_CALC_DISPO")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<decimal?>("FINANCE_CALC_DISPO")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<int>("ID_CALC_DISPO")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_CALC_DISPO"));

                    b.Property<decimal?>("INTERET_J_CALC_DISPO")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<decimal?>("MARGE_J_CALC_DISPO")
                        .HasColumnType("decimal(6, 4)");

                    b.Property<int?>("REF_ADH_CALC_DISPO")
                        .HasColumnType("int");

                    b.Property<int?>("REF_CTR_CALC_DISPO")
                        .HasColumnType("int");

                    b.Property<decimal?>("SOM_AVOIR_CALC_DISPO")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<decimal?>("SOM_COMM_FACTOR_CALC_DISPO")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<decimal?>("SOM_CREDIT_CALC_DISPO")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<decimal?>("SOM_DEBIT_CALC_DISPO")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<decimal?>("SOM_FACT_CALC_DISPO")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<decimal?>("SOM_FDG_FACT_CALC_DISPO")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<decimal?>("SOM_FDG_LIBERE_CALC_DISPO")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<decimal?>("SOM_TVA_COMM_FATOR_CALC_DISPO")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<decimal?>("TMM_J_CALC_DISPO")
                        .HasColumnType("decimal(6, 4)");

                    b.ToTable("T_CALC_DISPO", (string)null);
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.T_CALC_INT", b =>
                {
                    b.Property<int>("ID_CALC_INT")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_CALC_INT"));

                    b.Property<DateTime?>("DAT_CALC_INT")
                        .HasColumnType("date");

                    b.Property<decimal?>("MONT_CALC_INT")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<int>("REF_CTR_CALC_INT")
                        .HasColumnType("int");

                    b.HasKey("ID_CALC_INT");

                    b.HasIndex("REF_CTR_CALC_INT");

                    b.ToTable("T_CALC_INT", (string)null);
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.T_CALC_INT_IR", b =>
                {
                    b.Property<DateTime?>("Date_Echeance_IR")
                        .HasColumnType("date");

                    b.Property<int>("ID_CALC_IR")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_CALC_IR"));

                    b.Property<int?>("MAJOR_INT_INT_FIN_IR")
                        .HasColumnType("int");

                    b.Property<decimal?>("MONT_CALC_IR")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<decimal?>("MONT_OUV_DET_BORD_IR")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<int?>("REF_CTR_CALC_IR")
                        .HasColumnType("int");

                    b.Property<string>("REF_DOCUMENT_DET_BORD_IR")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.ToTable("T_CALC_INT_IR", (string)null);
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.T_COMMENT", b =>
                {
                    b.Property<int>("ID_COMMENT")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_COMMENT"));

                    b.Property<string>("ACTION")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("COMMENT")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("DATE_COMMENT")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DATE_TRAITE_COMMENT")
                        .HasColumnType("date");

                    b.Property<int>("ID_ACTION")
                        .HasColumnType("int");

                    b.Property<bool>("IS_RESOLVED")
                        .HasColumnType("bit");

                    b.Property<int?>("REF_CTR_ACTION")
                        .HasColumnType("int");

                    b.Property<string>("VALIDATION_TYPE")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ID_COMMENT");

                    b.ToTable("T_COMMENT", (string)null);
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.T_COMM_FACTORING", b =>
                {
                    b.Property<string>("TYP_COMM_FACTORING")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .IsFixedLength();

                    b.Property<int>("REF_CTR_COMM_FACTORING")
                        .HasColumnType("int");

                    b.Property<decimal?>("MONT_MIN_CTR_COMM_FACTORING")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<decimal?>("MONT_MIN_DOC_COMM_FACTORING")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<decimal?>("TX_COMM_FACTORING")
                        .HasColumnType("decimal(5, 3)");

                    b.HasKey("TYP_COMM_FACTORING", "REF_CTR_COMM_FACTORING")
                        .HasName("PK__T_COMM_F__C4A21010206A2EA6");

                    b.ToTable("T_COMM_FACTORING", (string)null);
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.T_COMM_RELEVE", b =>
                {
                    b.Property<int>("ID_COMM_RAP")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_COMM_RAP"));

                    b.Property<DateTime?>("DAT_BORD_COMM_RAP")
                        .HasColumnType("date");

                    b.Property<decimal?>("MONT_COMM_HT_COMM_RAP")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<decimal?>("MONT_COMM_TTC_COMM_RAP")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<decimal?>("MONT_COMM_TVA_COMM_RAP")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<string>("REF_CTR_COMM_RAP")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<decimal?>("TVA_COMM_RAP")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<string>("num_bord_COMM_RAP")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("ID_COMM_RAP");

                    b.ToTable("T_COMM_RELEVE", (string)null);
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.T_COMPTE", b =>
                {
                    b.Property<int>("ID_COMPT")
                        .HasColumnType("int");

                    b.Property<int>("ID_CIR")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DAT_CPT")
                        .HasColumnType("date");

                    b.Property<short?>("DELAI_PAI_CPT")
                        .HasColumnType("smallint");

                    b.Property<decimal?>("DEPASS_LIM_CPT")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<string>("DEVISE_ACH_CPT")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .IsFixedLength();

                    b.Property<decimal?>("FDG_REL_FACT_CPT")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<decimal?>("LIM_FIN_ACH_ADH")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<string>("MODE_REG_CPT")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<decimal?>("TOT_FACT_CPT")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<decimal?>("TOT_IMP_CPT")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<decimal?>("TOT_LIT_CPT")
                        .HasColumnType("decimal(15, 3)");

                    b.HasKey("ID_COMPT", "ID_CIR");

                    b.ToTable("T_COMPTE", (string)null);
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.T_CONFIGURATION_EMAIL", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("EMAIL")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<bool?>("EnableSsl")
                        .HasColumnType("bit");

                    b.Property<int?>("ID_FACTOR")
                        .HasColumnType("int");

                    b.Property<string>("MDP")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("PORT")
                        .HasColumnType("int");

                    b.Property<string>("SMTP")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.HasKey("ID");

                    b.ToTable("T_CONFIGURATION_EMAIL", (string)null);
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.T_CONTACT", b =>
                {
                    b.Property<short>("ID_CONTACT")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("ID_CONTACT"));

                    b.Property<bool?>("ACTIF_CONTACT")
                        .HasColumnType("bit");

                    b.Property<string>("FAX_CONTACT")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("MAIL1_COONTACT")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("MAIL2_COONTACT")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("NOM_PRE_CONTACT")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("POS_CONTACT")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("REF_IND_CONTACT")
                        .HasColumnType("int");

                    b.Property<string>("TEL1_CONTACT")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("TEL2_CONTACT")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.HasKey("ID_CONTACT")
                        .HasName("PK__T_CONTAC__D7288A5A1844C16F");

                    b.ToTable("T_CONTACT", (string)null);
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.T_CONTACT_FACTOR", b =>
                {
                    b.Property<int>("ID_CONTACT")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_CONTACT"));

                    b.Property<bool?>("ACTIF_CONTACT")
                        .HasColumnType("bit");

                    b.Property<string>("FAX_CONTACT")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("MAIL1_CONTACT")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("MAIL2_CONTACT")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("NOM_PRE_CONTACT")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("POS_CONTACT")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("REF_IND_CONTACT")
                        .HasColumnType("int");

                    b.Property<string>("TEL1_CONTACT")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TEL2_CONTACT")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("ID_CONTACT");

                    b.ToTable("T_CONTACT_FACTOR", (string)null);
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.T_CONTRAT", b =>
                {
                    b.Property<int>("REF_CTR")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("REF_CTR"));

                    b.Property<decimal?>("CA_CTR")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<decimal?>("CA_EXP_CTR")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<decimal?>("CA_IMP_CTR")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<DateTime?>("DAT_CREATION_CTR")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DAT_DEB_CTR")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DAT_PROCH_VERS_CTR")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DAT_RESIL_CTR")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DAT_SIGN_CTR")
                        .HasColumnType("date");

                    b.Property<short?>("DELAI_MAX_REG_CTR")
                        .HasColumnType("smallint");

                    b.Property<short?>("DELAI_MOYEN_REG_CTR")
                        .HasColumnType("smallint");

                    b.Property<decimal?>("DERN_MONT_DISP_2")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<string>("DEVISE_CTR")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .IsFixedLength();

                    b.Property<bool?>("FACT_REG_CTR")
                        .HasColumnType("bit");

                    b.Property<bool?>("IS_NOTIFIED")
                        .HasColumnType("bit");

                    b.Property<decimal?>("LIM_FIN_CTR")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<decimal?>("MIN_COMM_FACT")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<short?>("NB_ACH_PREVU_CTR")
                        .HasColumnType("smallint");

                    b.Property<short?>("NB_AVOIRS_PREVU_CTR")
                        .HasColumnType("smallint");

                    b.Property<short?>("NB_FACT_PREVU_CTR")
                        .HasColumnType("smallint");

                    b.Property<short?>("NB_REMISES_PREVU_CTR")
                        .HasColumnType("smallint");

                    b.Property<string>("OLD_STATUT_CTR")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("REF_CTR_PAPIER_CTR")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)");

                    b.Property<int?>("RESP_CTR_1")
                        .HasColumnType("int");

                    b.Property<int?>("RESP_CTR_2")
                        .HasColumnType("int");

                    b.Property<bool?>("SERVICE_CTR")
                        .HasColumnType("bit");

                    b.Property<string>("STATUT_CTR")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("TYP_CTR")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .IsFixedLength();

                    b.HasKey("REF_CTR")
                        .HasName("PK__T_CONTRA__C374064F18EBB532");

                    b.ToTable("T_CONTRAT", (string)null);
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.T_Comm_MFG", b =>
                {
                    b.Property<string>("Code_MFG")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("Date_Envoie_MFG")
                        .HasColumnType("date");

                    b.Property<bool?>("Flag_MFG")
                        .HasColumnType("bit");

                    b.Property<int>("Id_MFG")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_MFG"));

                    b.Property<decimal?>("Mnt_Comm_MFG")
                        .HasColumnType("numeric(18, 3)");

                    b.Property<int?>("Num_Bord_MFG")
                        .HasColumnType("int");

                    b.Property<string>("Ref_ADH_MFG")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Type_Action_MFG")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Type_MFG")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("date_Saisie_MFG")
                        .HasColumnType("date");

                    b.ToTable("T_Comm_MFG", (string)null);
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.T_DEM_FIN_CREDIT", b =>
                {
                    b.Property<int>("ID_DEM_FIN_CREDIT")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_DEM_FIN_CREDIT"));

                    b.Property<DateTime?>("DAT_CREDIT_ACC")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DAT_FIN_ACC")
                        .HasColumnType("date");

                    b.Property<int>("ID_CIR_DEM")
                        .HasColumnType("int");

                    b.Property<decimal?>("MONT_CREDIT_ACC")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<decimal?>("MONT_CREDIT_DEM")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<decimal?>("MONT_FIN_ACC")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<decimal?>("MONT_FIN_DEM")
                        .HasColumnType("decimal(15, 3)");

                    b.HasKey("ID_DEM_FIN_CREDIT")
                        .HasName("PK__T_DEM_FI__0B18FF0A093F5D4E");

                    b.ToTable("T_DEM_FIN_CREDIT", (string)null);
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.T_DEM_LIMITE", b =>
                {
                    b.Property<int>("REF_DEM_LIM")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("REF_DEM_LIM"));

                    b.Property<int>("REF_CTR_DEM_LIM")
                        .HasColumnType("int");

                    b.Property<bool?>("ACTIF_DEM_LIMI")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DATLIM_DEM_LIM")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DAT_ANNUL_DEM_LIM")
                        .HasColumnType("date");

                    b.Property<DateTime>("DAT_DEM_LIM")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DAT_LAST_DEM_LIM")
                        .HasColumnType("date");

                    b.Property<string>("DECISION_LIM")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .IsFixedLength();

                    b.Property<short?>("DELAIS_ACC")
                        .HasColumnType("smallint");

                    b.Property<short?>("DELAIS_DEM_LIM")
                        .HasColumnType("smallint");

                    b.Property<string>("DEVISE")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .IsFixedLength();

                    b.Property<string>("MODE_PAY_ACC")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("MODE_PAY_DEM_LIM")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<decimal?>("MONT_ACC")
                        .HasColumnType("decimal(17, 3)");

                    b.Property<decimal?>("MONT_DEM_LIM")
                        .HasColumnType("decimal(17, 3)");

                    b.Property<decimal?>("MONT_LIM_ACH_ADH")
                        .HasColumnType("decimal(17, 3)");

                    b.Property<int?>("REF_ACH_LIM")
                        .HasColumnType("int");

                    b.Property<string>("SORT_DEM_LIM")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TYP_DEM_LIM")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .IsFixedLength();

                    b.HasKey("REF_DEM_LIM", "REF_CTR_DEM_LIM")
                        .HasName("PK_T_DEM_LIMITE_1");

                    b.ToTable("T_DEM_LIMITE", (string)null);
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.T_DET_ASS", b =>
                {
                    b.Property<int>("REF_ASS")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("REF_ASS"));

                    b.Property<bool?>("ACTIF_ASS")
                        .HasColumnType("bit");

                    b.Property<int?>("DELAIS_DECALARATION_SINISTRE_ASS")
                        .HasColumnType("int");

                    b.Property<decimal?>("PRIME_ASS")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<int?>("REF_CTR_ASS")
                        .HasColumnType("int");

                    b.Property<decimal?>("TX_COUVERTURE_ASS")
                        .HasColumnType("decimal(15, 3)");

                    b.HasKey("REF_ASS");

                    b.ToTable("T_DET_ASS", (string)null);
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.T_DET_BORD", b =>
                {
                    b.Property<string>("ID_DET_BORD")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<int>("REF_CTR_DET_BORD")
                        .HasColumnType("int");

                    b.Property<string>("ANNEE_BORD")
                        .IsRequired()
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("char(4)")
                        .IsFixedLength();

                    b.Property<bool?>("ANNUL_DET_BORD")
                        .HasColumnType("bit");

                    b.Property<string>("COMM_DET_BORD")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("DAT_DET_BORD")
                        .HasColumnType("date");

                    b.Property<short?>("DELAI_PAIE_DET_BORD")
                        .HasColumnType("smallint");

                    b.Property<string>("DEVISE_DET_BORD")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .IsFixedLength();

                    b.Property<DateTime?>("ECH_APR_PROROG_DET_BORD")
                        .HasColumnType("date");

                    b.Property<short?>("ECH_DET_BORD")
                        .HasColumnType("smallint");

                    b.Property<int?>("ID_CALC_DISPO_DET_BORD")
                        .HasColumnType("int");

                    b.Property<string>("MODE_REG_DET_BORD")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .IsFixedLength();

                    b.Property<decimal?>("MONT_COMM_FACT_DET_BORD")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<decimal?>("MONT_FDG_DET_BORD")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<decimal?>("MONT_FDG_LIBERE_DET_BORD")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<decimal?>("MONT_OUV_DET_BORD")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<decimal?>("MONT_TTC_COMM_FACT_DET_BORD")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<decimal?>("MONT_TTC_DET_BORD")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<decimal?>("MONT_TVA_COMM_FACT_DET_BORD")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<string>("NUM_BORD")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("NUM_CREANCE_ASS_BORD")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("REF_DET_BORD")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("REF_IND_DET_BORD")
                        .HasColumnType("int");

                    b.Property<decimal?>("RETENU_DET_BORD")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<decimal?>("TX_COMM_FACT_DET_BORD")
                        .HasColumnType("decimal(6, 4)");

                    b.Property<decimal?>("TX_FDG_DET_BORD")
                        .HasColumnType("decimal(5, 3)");

                    b.Property<decimal?>("TX_TVA_COMM_FACT_DET_BORD")
                        .HasColumnType("decimal(5, 3)");

                    b.Property<string>("TYP_ASS_DET_BORD")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .IsFixedLength();

                    b.Property<string>("TYP_DET_BORD")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .IsFixedLength();

                    b.Property<string>("TYP_REG_DET_BORD")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .IsFixedLength();

                    b.Property<bool?>("VALIDE_DET_BORD")
                        .HasColumnType("bit");

                    b.HasKey("ID_DET_BORD", "REF_CTR_DET_BORD")
                        .HasName("PK__T_DET_BO__B2C9266D6319B466");

                    b.HasIndex("REF_CTR_DET_BORD");

                    b.ToTable("T_DET_BORD", (string)null);
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.T_DOC_GED", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("ADRESS_DOC_GED")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)");

                    b.Property<int?>("ANNEE_BORD_GED")
                        .HasColumnType("int");

                    b.Property<string>("Archive_GED")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Armoire_GED")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("DATE_SCAN_GED")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DATE_TACHE_GED")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("Data_GED")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Etape_ged")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<bool?>("Etat_GED")
                        .HasColumnType("bit");

                    b.Property<string>("Etgage_GED")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ID_BOR_GED")
                        .HasColumnType("int");

                    b.Property<int?>("ID_CREDIT_GED")
                        .HasColumnType("int");

                    b.Property<int?>("ID_CTR_GED")
                        .HasColumnType("int");

                    b.Property<int?>("ID_DEBIT_GED")
                        .HasColumnType("int");

                    b.Property<int?>("ID_DET_BORD_GED")
                        .HasColumnType("int");

                    b.Property<int?>("ID_ENC_GED")
                        .HasColumnType("int");

                    b.Property<string>("ID_Emetteur_GED")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ID_FINCANEMENT_GED")
                        .HasColumnType("int");

                    b.Property<int?>("ID_GESTIONNAIRE_GED")
                        .HasColumnType("int");

                    b.Property<int?>("ID_IND_GED")
                        .HasColumnType("int");

                    b.Property<string>("LIBELLE2_GED")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("LIBELLE_GED")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name_GED")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("salle_GED")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("id");

                    b.ToTable("T_DOC_GED", (string)null);
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.T_DOC_PHYSIQUE", b =>
                {
                    b.Property<string>("TYP_DOC_PHY")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .IsFixedLength();

                    b.Property<int>("REF_CTR_DOC_PHY")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DAT_EXPIR_DOC_PHY")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DAT_VALID_DOC_PHY")
                        .HasColumnType("date");

                    b.Property<bool?>("DOC_BLOQ_DOC_PHY")
                        .HasColumnType("bit");

                    b.Property<bool?>("DOC_RECU_DOC_PHY")
                        .HasColumnType("bit");

                    b.Property<bool?>("IS_SENT")
                        .HasColumnType("bit");

                    b.Property<string>("REF_USER_DOC_PHY")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.HasKey("TYP_DOC_PHY", "REF_CTR_DOC_PHY")
                        .HasName("PK__T_DOC_PH__47E98F6E7A3223E8");

                    b.ToTable("T_DOC_PHYSIQUE", (string)null);
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.T_Det_Achat_RELEVE", b =>
                {
                    b.Property<int>("ID_Det_Achat_REL")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_Det_Achat_REL"));

                    b.Property<DateTime?>("DAT_BORD_Det_Achat_REL")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DAT_DET_BORD_Det_Achat_REL")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DAT_ECHEANCE_Det_Achat_REL")
                        .HasColumnType("date");

                    b.Property<decimal?>("MONT_TTC_COMM_Det_Achat_REL")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<decimal?>("MONT_TTC_Det_Achat_REL")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<int?>("REF_CTR_Det_Achat_REL")
                        .HasColumnType("int");

                    b.Property<decimal?>("TX_COMM_Det_Achat_REL")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<string>("TYP_DET_BORD_Det_Achat_REL")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("nom_ind_Det_Achat_REL")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("num_bord_Det_Achat_REL")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ref_document_Det_Achat_REL")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ID_Det_Achat_REL");

                    b.ToTable("T_Det_Achat_RELEVE", (string)null);
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.T_EC_COMPTABLE", b =>
                {
                    b.Property<string>("CODE_ENT_EC_CPT")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)");

                    b.Property<string>("COD_JOURNAL_EC_CPT")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<DateTime?>("DAT_EFF_EC_CPT")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DAT_SAIS_EC_CPT")
                        .HasColumnType("date");

                    b.Property<string>("DECS_SRC_CG_EC_CPT")
                        .HasMaxLength(32)
                        .IsUnicode(false)
                        .HasColumnType("varchar(32)");

                    b.Property<string>("DESC_EC_CPT")
                        .HasMaxLength(70)
                        .IsUnicode(false)
                        .HasColumnType("varchar(70)");

                    b.Property<string>("DEVISE_EC_CPT")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)");

                    b.Property<string>("DOMAINE_EC_CPT")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("ID_EC_CPT")
                        .HasColumnType("int");

                    b.Property<string>("ID_USER_EC_EPT")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<long?>("LIGNE_EC_CPT")
                        .HasColumnType("bigint");

                    b.Property<string>("LOT_EC_CPT")
                        .HasMaxLength(8)
                        .HasColumnType("nchar(8)")
                        .IsFixedLength();

                    b.Property<decimal?>("MONT_EC_CPT")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<int?>("REF_ADH_EC_CPT")
                        .HasColumnType("int");

                    b.Property<string>("REF_EC_CPT")
                        .HasMaxLength(14)
                        .IsUnicode(false)
                        .HasColumnType("varchar(14)");

                    b.Property<string>("SEQ_COD_JOURNAL_EC_CPT")
                        .HasMaxLength(9)
                        .HasColumnType("nchar(9)")
                        .IsFixedLength();

                    b.Property<string>("TYP_DOC_EC_CPT")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("TYP_TR_EC_CPT")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.ToTable("T_EC_COMPTABLE", (string)null);
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.T_EC_CPT", b =>
                {
                    b.Property<int>("ID_ECCPT")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_ECCPT"));

                    b.Property<int?>("ANNEE_EC_CPT")
                        .HasColumnType("int");

                    b.Property<string>("CODE_CENTRE_ANALYSE_EC_CPT")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)");

                    b.Property<string>("CODE_DEP_EC_CPT")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CODE_EC_CPT")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CODE_JOURNAL_EC_CPT")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)");

                    b.Property<string>("CODE_TIERS_EC_CPT")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("COMPTE_EC_CPT")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("COMPTE_GEN_EC_CPT")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal?>("CREDIT_EC_CPT")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<DateTime?>("DATE_EC_CPT")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DATE_EFFET_EC_CPT")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DATE_SAISIE_EC_CPT")
                        .HasColumnType("date");

                    b.Property<string>("DOMAINE_EC_CPT")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int>("ID_EC_CPT")
                        .HasColumnType("int");

                    b.Property<string>("INTITULE_EC_CPT")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LIBELLEE_EC_CPT")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LOT_EC_CPT")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<decimal?>("MONTANT_EC_CPT")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<string>("NOM_USER_EC_CPT")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("NUM_EC_EC_CPT")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<byte?>("NUM_LIGNE_EC_CPT")
                        .HasColumnType("tinyint");

                    b.Property<int?>("REF_ADH_EC_CPT")
                        .HasColumnType("int");

                    b.Property<string>("REF_MFG_ADH_EC_CPT")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("REF_PIECE_EC_CPT")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("TYPE_DOC_EC_CPT")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("TYPE_TRANSACTION_EC_CPT")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)");

                    b.HasKey("ID_ECCPT");

                    b.ToTable("T_EC_CPT", (string)null);
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.T_EMAIL", b =>
                {
                    b.Property<int>("ID_USER")
                        .HasColumnType("int");

                    b.Property<string>("TITRE_GROUPE")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ID_EMAIL")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_EMAIL"));

                    b.HasKey("ID_USER", "TITRE_GROUPE");

                    b.ToTable("T_EMAIL", (string)null);
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.T_ENCAISSEMENT", b =>
                {
                    b.Property<short>("ID_ENC")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("ID_ENC"));

                    b.Property<string>("BORD_ENC")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("DAT_RECEP_ENC")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DAT_VAL_ENC")
                        .HasColumnType("date");

                    b.Property<string>("DEVISE_ENC")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .IsFixedLength();

                    b.Property<decimal?>("MONT_ENC")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<bool?>("PREAVIS")
                        .HasColumnType("bit");

                    b.Property<int?>("REF_ACH_ENC")
                        .HasColumnType("int");

                    b.Property<int?>("REF_ADH_ENC")
                        .HasColumnType("int");

                    b.Property<int>("REF_CTR_ENC")
                        .HasColumnType("int");

                    b.Property<string>("REF_ENC")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("REF_SEQ_ENC")
                        .HasMaxLength(9)
                        .IsUnicode(false)
                        .HasColumnType("varchar(9)");

                    b.Property<string>("RIB_ENC")
                        .HasMaxLength(30)
                        .HasColumnType("nchar(30)")
                        .IsFixedLength();

                    b.Property<string>("TYP_ENC")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<bool?>("VALIDE_ENC")
                        .HasColumnType("bit");

                    b.HasKey("ID_ENC")
                        .HasName("PK__T_ENCAIS__2D4C367D67DE6983");

                    b.ToTable("T_ENCAISSEMENT", (string)null);
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.T_ETAT_DISPO", b =>
                {
                    b.Property<DateTime?>("Date_ETAT_DISPO")
                        .HasColumnType("date");

                    b.Property<decimal?>("Depass_Limite_ETAT_DISPO")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<decimal?>("Disponible_ETAT_DISPO")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<int>("ID_ETAT_DISPO")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_ETAT_DISPO"));

                    b.Property<int?>("Ref_Ctr__ETAT_DISPO")
                        .HasColumnType("int");

                    b.Property<decimal?>("Total_Av_ETAT_DISPO")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<decimal?>("Total_Comm_ETAT_DISPO")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<decimal?>("Total_Credit_ETAT_DISPO")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<decimal?>("Total_Debit_ETAT_DISPO")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<decimal?>("Total_Disponible_2_ETAT_DISPO")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<decimal?>("Total_Encours_Facture_ETAT_DISPO")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<decimal?>("Total_FDG_ETAT_DISPO")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<decimal?>("Total_Facture_ETAT_DISPO")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<decimal?>("Total_Fin_ETAT_DISPO")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<decimal?>("Total_Financement_du_mois_ETAT_DISPO")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<decimal?>("Total_Fonds_Reserve_ETAT_DISPO")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<decimal?>("Total_Frais_ETAT_DISPO")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<decimal?>("Total_IR_ETAT_DIPOS")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<decimal?>("Total_Instru_Paiments_Imp_ETAT_DIPOS")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<decimal?>("Total_Interet_ETAT_DISPO")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<decimal?>("Total_Litiges_ouvert_ETAT_DISPO")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<decimal?>("Total_Retard_Paiement_Algo_ETAT_DISPO")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<decimal?>("Total_Retenue_ETAT_DISPO")
                        .HasColumnType("decimal(15, 3)");

                    b.ToTable("T_ETAT_DISPO", (string)null);
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.T_EXTRAIT", b =>
                {
                    b.Property<long>("ID_EXTRAIT")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID_EXTRAIT"));

                    b.Property<decimal?>("AUTRE_EXTRAIT")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<decimal?>("CREDIT_EXTRAIT")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<DateTime?>("DAT_OP_EXTRAIT")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DAT_VAL_EXTRAIT")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("DEBIT_EXTRAIT")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<decimal?>("DISPONIBLE_EXTRAIT")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<decimal?>("ENCOURFACT_EXTRAIT")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<decimal?>("FDG_EXTRAIT")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<string>("LIB_EXTRAIT")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<int?>("REF_CTR_EXTRAIT")
                        .HasColumnType("int");

                    b.Property<decimal?>("TOTAL_FIN_EXTRAIT")
                        .HasColumnType("decimal(15, 3)");

                    b.HasKey("ID_EXTRAIT");

                    b.ToTable("T_EXTRAIT", (string)null);
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.T_FACTOR", b =>
                {
                    b.Property<int>("ID_FACTOR")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_FACTOR"));

                    b.Property<string>("ABRV")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ADRESSE")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("CAPITAL")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("CAPITAL_LETTRE")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("CNX_DB")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CODE_DOUANE")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("CODE_TVA")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("DB")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DEVISE")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("Det_Doc_GED")
                        .HasColumnType("bit");

                    b.Property<string>("EMAIL")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("EXERCICE")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)");

                    b.Property<string>("FAX")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("LANGUE")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<byte[]>("LOGO_16")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("LOGO_32")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("LOGO_48")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("MDP_CNX")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MF")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("PAYS")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("RAISON_SOCIAL")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("RC")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("SITE_WEB")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SRV_DB")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TEL")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("ID_FACTOR");

                    b.ToTable("T_FACTOR", (string)null);
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.T_FINANCEMENT", b =>
                {
                    b.Property<int>("ID_FIN")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_FIN"));

                    b.Property<DateTime?>("DAT_FIN")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DAT_INSTR_FIN")
                        .HasColumnType("date");

                    b.Property<string>("ETAT_FIN")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("ID_DISPO_FIN")
                        .HasColumnType("int");

                    b.Property<string>("INSTR_FIN")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal?>("MONT_FIN")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<int?>("REF_ADH_FIN")
                        .HasColumnType("int");

                    b.Property<int?>("REF_CTR_FIN")
                        .HasColumnType("int");

                    b.Property<string>("REF_INSTR_FIN")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("TYPE_ENC")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ID_FIN")
                        .HasName("PK_T_FINANCEMENT_5");

                    b.ToTable("T_FINANCEMENT", (string)null);
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.T_FOND_GARANTIE", b =>
                {
                    b.Property<int>("REF_CTR_FDG")
                        .HasColumnType("int");

                    b.Property<string>("TYP_FDG")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .IsFixedLength();

                    b.Property<string>("LIB_FDG")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<decimal?>("MONT_MAX_FDG")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<decimal?>("MONT_MIN_FDG")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<decimal?>("TX_FDG")
                        .HasColumnType("decimal(5, 3)");

                    b.Property<string>("TYP_DOC_REMIS_FDG")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("REF_CTR_FDG", "TYP_FDG")
                        .HasName("PK__T_FOND_G__CD7BEB41B71B42C1");

                    b.ToTable("T_FOND_GARANTIE", (string)null);
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.T_FRAIS_DIVER", b =>
                {
                    b.Property<string>("TYP_FRAIS_DIVERS")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .IsFixedLength();

                    b.Property<int>("REF_CTR_FRAIS_DIVERS")
                        .HasColumnType("int");

                    b.Property<string>("LIB_FRAIS_DIVERS")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal?>("MONT_PAR_UNIT_FRAIS_DIVERS")
                        .HasColumnType("decimal(15, 3)");

                    b.HasKey("TYP_FRAIS_DIVERS", "REF_CTR_FRAIS_DIVERS")
                        .HasName("PK__T_FRAIS___B72D5284465B0E76");

                    b.ToTable("T_FRAIS_DIVERS", (string)null);
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.T_FRAIS_PAIEMENT", b =>
                {
                    b.Property<string>("TYP_FRAIS_PAIE")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .IsFixedLength();

                    b.Property<int>("REF_CTR_FRAIS_PAIE")
                        .HasColumnType("int");

                    b.Property<string>("LIB_FRAIS_PAIE")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal?>("MONT_PAR_INSTR_FRAIS_PAIE")
                        .HasColumnType("decimal(15, 3)");

                    b.HasKey("TYP_FRAIS_PAIE", "REF_CTR_FRAIS_PAIE")
                        .HasName("PK__T_FRAIS___D572DF09CAE41C88");

                    b.ToTable("T_FRAIS_PAIEMENT", (string)null);
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.T_FRAIS_RELEVE", b =>
                {
                    b.Property<int>("ID_FRAIS_REL")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_FRAIS_REL"));

                    b.Property<decimal?>("MNTTTCT")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<decimal?>("MONT_PAR_INSTR_FRAIS_PAIE")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<int?>("Nb_piéce")
                        .HasColumnType("int");

                    b.Property<int?>("REF_CTR_")
                        .HasColumnType("int");

                    b.Property<decimal?>("TAXTVA")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<decimal?>("TTCPP")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<decimal?>("TVA")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<DateTime?>("dat_recep_enc")
                        .HasColumnType("date");

                    b.Property<string>("typ_enc")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ID_FRAIS_REL");

                    b.ToTable("T_FRAIS_RELEVE", (string)null);
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.T_Fichiers_Scan", b =>
                {
                    b.Property<string>("Adresse_Scan")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Affect_Scan")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("Date_Scan")
                        .HasColumnType("date");

                    b.Property<int>("Id_Scan")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_Scan"));

                    b.Property<string>("Nom_Fichier_SansEXT")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Nom_Fichier_Scan")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.ToTable("T_Fichiers_Scan", (string)null);
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.T_GROUPE", b =>
                {
                    b.Property<int>("ID_GROUP")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_GROUP"));

                    b.Property<string>("NOM_GROUP")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("REF_IND_GROUP")
                        .HasColumnType("int");

                    b.HasKey("ID_GROUP");

                    b.ToTable("T_GROUPE", (string)null);
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.T_HISTORIQUE", b =>
                {
                    b.Property<int>("ID_HISTORIQUEE")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_HISTORIQUEE"));

                    b.Property<string>("ABREV_ROLE_HIST")
                        .HasMaxLength(400)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)");

                    b.Property<string>("ACTION")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("DATE_ACTION")
                        .HasColumnType("datetime");

                    b.Property<string>("ID_ENREGISTREMENT")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("ID_HISTORIQUE")
                        .HasColumnType("int");

                    b.Property<string>("IP_PC")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("LOGIN_USER")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("NOM_PC")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("REF_CTR_HIST")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("REF_IND_HIST")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("T_TABLE")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ID_HISTORIQUEE");

                    b.ToTable("T_HISTORIQUE", (string)null);
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.T_IMPAYE", b =>
                {
                    b.Property<int>("ID_IMP")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_IMP"));

                    b.Property<DateTime?>("DATE_IMP")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DATE_RESOL_IMP")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DATE_SAISI_IMP")
                        .HasColumnType("date");

                    b.Property<int?>("ID_DET_BORD_IMP")
                        .HasColumnType("int");

                    b.Property<int>("ID_ENC_IMP")
                        .HasColumnType("int");

                    b.Property<string>("ID_NV_ENCS")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<bool?>("IS_RESOLU")
                        .HasColumnType("bit");

                    b.Property<decimal?>("MONT_IMP")
                        .HasColumnType("decimal(15, 3)");

                    b.HasKey("ID_IMP");

                    b.ToTable("T_IMPAYE", (string)null);
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.T_INDIVIDU", b =>
                {
                    b.Property<int>("REF_IND")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("REF_IND"));

                    b.Property<string>("ABRV_IND")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("char(20)")
                        .IsFixedLength();

                    b.Property<string>("ADR_IND")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("COD_SCLAS")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("COD_TVA_IND")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("char(20)")
                        .IsFixedLength();

                    b.Property<string>("CP_IND")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("DATE_DOC_ID_IND")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DAT_DEB_EXO")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DAT_FIN_EXO")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DAT_INFO_IND")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DAT_NAISS_CREAT")
                        .HasColumnType("date");

                    b.Property<string>("EMAIL_IND")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("EXO_IND")
                        .HasColumnType("bit");

                    b.Property<bool?>("EXO_TVA")
                        .HasColumnType("bit");

                    b.Property<string>("FAX_IND")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("FROM_JUR_IND")
                        .HasMaxLength(100)
                        .HasColumnType("nchar(100)")
                        .IsFixedLength();

                    b.Property<string>("GENRE_IND")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .IsFixedLength();

                    b.Property<bool?>("GRP_IND")
                        .HasColumnType("bit");

                    b.Property<int?>("ID_GROUPE")
                        .HasColumnType("int");

                    b.Property<int?>("ID_NLDP")
                        .HasColumnType("int");

                    b.Property<string>("INFO_IND")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("LIEU_DOC_ID_IND")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal?>("LIM_CRED_GLO_IND")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<decimal?>("LIM_FIN_GLO_IND")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<byte[]>("LOGO_IND")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("MF_IND")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("NOM_IND")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("NUM_DOC_ID_IND")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<byte[]>("PHOTO_IND")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PRE_IND")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("RC_IND")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("REF_ACH_IND")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<string>("REF_ADH_IND")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<string>("TEL_IND")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("TYP_DOC_ID_IND")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("REF_IND")
                        .HasName("PK__T_INDIVI__C2FC383A7073AF84");

                    b.HasIndex(new[] { "NOM_IND", "PRE_IND" }, "UQ_NOM_PRENOM")
                        .IsUnique()
                        .HasFilter("[NOM_IND] IS NOT NULL AND [PRE_IND] IS NOT NULL");

                    b.ToTable("T_INDIVIDU", (string)null);
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.T_INFO_CTR", b =>
                {
                    b.Property<int>("ID_INFO_CTR")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_INFO_CTR"));

                    b.Property<DateTime?>("DATE_INFO_CTR")
                        .HasColumnType("date");

                    b.Property<int?>("ID_USER_INFO_CTR")
                        .HasColumnType("int");

                    b.Property<string>("LIBELLE_INFO_CTR")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int?>("REF_INFO_CTR")
                        .HasColumnType("int");

                    b.HasKey("ID_INFO_CTR");

                    b.ToTable("T_INFO_CTR", (string)null);
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.T_INT_FINANCEMENT", b =>
                {
                    b.Property<string>("TYP_INSTR_INT_FIN")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .IsFixedLength();

                    b.Property<int>("REF_CTR_INT_FIN")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DAT_DEB_VALID_INT_FIN")
                        .HasColumnType("date");

                    b.Property<short?>("DELAI_MAX_PAI_INT_FIN")
                        .HasColumnType("smallint");

                    b.Property<decimal?>("MAJOR_INT_INT_FIN")
                        .HasColumnType("decimal(5, 3)");

                    b.Property<decimal?>("PRECOMPTE_INT_FIN")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<decimal?>("TX_INT_MARCHE_INT_FIN")
                        .HasColumnType("decimal(5, 3)");

                    b.Property<decimal?>("TX_MARGE_CTR_INT_FIN")
                        .HasColumnType("decimal(5, 3)");

                    b.HasKey("TYP_INSTR_INT_FIN", "REF_CTR_INT_FIN")
                        .HasName("PK__T_INT_FI__BEC6666211EF5D1D");

                    b.ToTable("T_INT_FINANCEMENT", (string)null);
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.T_LITIGE", b =>
                {
                    b.Property<int>("ID_LITIGE")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_LITIGE"));

                    b.Property<DateTime?>("DAT_LIT")
                        .HasColumnType("date");

                    b.Property<DateTime?>("ECH_LIT")
                        .HasColumnType("date");

                    b.Property<bool?>("ETAT_LIT")
                        .HasColumnType("bit");

                    b.Property<short?>("ID_DET_BORD_LIT")
                        .HasColumnType("smallint");

                    b.Property<decimal?>("MONT_LT")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<int>("REF_CTR_LIT")
                        .HasColumnType("int");

                    b.Property<string>("TYP_LIT")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .IsFixedLength();

                    b.HasKey("ID_LITIGE")
                        .HasName("PK__T_LITIGE__66F660A1412EB0B6");

                    b.ToTable("T_LITIGE", (string)null);
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.T_MOTIF_LIT", b =>
                {
                    b.Property<int>("REF_CTR_MOTIF_LIT")
                        .HasColumnType("int");

                    b.Property<string>("TYP_MOTIF_LIT")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .IsFixedLength();

                    b.Property<bool?>("ALERTE_LIT_MOTIF_LIT")
                        .HasColumnType("bit");

                    b.Property<short?>("DELAI_RESOL_MOTIF_LIT")
                        .HasColumnType("smallint");

                    b.Property<bool?>("FRAIS_MOTIF_LIT")
                        .HasColumnType("bit");

                    b.Property<string>("LIB_MOTIF_LIT")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("LOGIN_USER_MOTIF_LIT")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("RETRO_AUTO_MOTIF_LIT")
                        .HasColumnType("bit");

                    b.HasKey("REF_CTR_MOTIF_LIT", "TYP_MOTIF_LIT")
                        .HasName("PK__T_MOTIF___CA7DAB520D44F85C");

                    b.ToTable("T_MOTIF_LIT", (string)null);
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.T_MOTIF_PROG", b =>
                {
                    b.Property<string>("TYP_MOTIF_PROG")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .IsFixedLength();

                    b.Property<int>("REF_CTR_MOTIF_PROG")
                        .HasColumnType("int");

                    b.Property<bool?>("ALERTE_LIT_MOTIF_PROG")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DAT_MOTIF_PROG")
                        .HasColumnType("date");

                    b.Property<DateTime?>("ECH_MOTIF_PROG")
                        .HasColumnType("date");

                    b.Property<bool?>("FRAIS_MOTIF_PROG")
                        .HasColumnType("bit");

                    b.Property<string>("LIB_MOTIF_PROG")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("LOGIN_USER_MOTIF_PROG")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("TYP_MOTIF_PROG", "REF_CTR_MOTIF_PROG")
                        .HasName("PK__T_MOTIF___92C097C701D345B0");

                    b.ToTable("T_MOTIF_PROG", (string)null);
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.T_MVT_CREDIT", b =>
                {
                    b.Property<int>("ID_CREDIT")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_CREDIT"));

                    b.Property<string>("ABRV_CREDIT")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("DATE_CREDIT")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DAT_VAL_ENC_CREDIT")
                        .HasColumnType("date");

                    b.Property<string>("LIBELLE_LIBRE_CREDIT")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal?>("MONT_CREDIT")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<int>("REF_CTR_CREDIT")
                        .HasColumnType("int");

                    b.Property<string>("REF_ENC_CREDIT")
                        .HasMaxLength(18)
                        .IsUnicode(false)
                        .HasColumnType("varchar(18)");

                    b.Property<string>("TYP_CREDIT")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .IsFixedLength();

                    b.HasKey("ID_CREDIT");

                    b.ToTable("T_MVT_CREDIT", (string)null);
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.T_MVT_DEBIT", b =>
                {
                    b.Property<int>("ID_DEBIT")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_DEBIT"));

                    b.Property<string>("ABEV_DEBIT")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("DATE_DEBIT")
                        .HasColumnType("date");

                    b.Property<decimal?>("MONT_DEBIT")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<int>("REF_CTR_DEBIT")
                        .HasColumnType("int");

                    b.Property<string>("TYP_DEBIT")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .IsFixedLength();

                    b.HasKey("ID_DEBIT");

                    b.ToTable("T_MVT_DEBIT", (string)null);
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.T_PROROGATION", b =>
                {
                    b.Property<int>("ID_PROROGATION")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_PROROGATION"));

                    b.Property<DateTime?>("DAT_PROG")
                        .HasColumnType("date");

                    b.Property<DateTime>("ECH_PROG")
                        .HasColumnType("date");

                    b.Property<bool?>("ETAT_PROG")
                        .HasColumnType("bit");

                    b.Property<int>("ID_DET_BORD_PROG")
                        .HasColumnType("int");

                    b.Property<string>("MOTIF_PROG")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("REF_CTR_PROG")
                        .HasColumnType("int");

                    b.Property<string>("TYP_PROG")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .IsFixedLength();

                    b.HasKey("ID_PROROGATION");

                    b.ToTable("T_PROROGATION", (string)null);
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.T_RELANCE", b =>
                {
                    b.Property<int>("ID_RELANCE")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_RELANCE"));

                    b.Property<DateTime?>("DATE_RELANCE")
                        .HasColumnType("date");

                    b.Property<string>("LIBELLE_RELANCE")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("REF_CTR_RELANCE")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("REF_DOC_RELANCE")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("USER_RELANCE")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool?>("VALIDE_RELANCE")
                        .HasColumnType("bit");

                    b.HasKey("ID_RELANCE");

                    b.ToTable("T_RELANCE", (string)null);
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.T_RELEVE", b =>
                {
                    b.Property<int>("ID_RELEVE")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_RELEVE"));

                    b.Property<string>("ADH_RELEVE")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Contrat_RELEVE")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<decimal?>("Credit_RELEVE")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<DateTime?>("Date_OP_RELEVE")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Date_RELEVE")
                        .HasColumnType("datetime");

                    b.Property<string>("Disponible_RELEVE")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Encours_Facture_RELEVE")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Libelle_OP_RELEVE")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PP_RELEVE")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal?>("autre_RELEVE")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<decimal?>("debit_RELEVE")
                        .HasColumnType("decimal(15, 3)");

                    b.HasKey("ID_RELEVE");

                    b.ToTable("T_RELEVE", (string)null);
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.T_RIB_FACTOR", b =>
                {
                    b.Property<int>("ID_FACTOR")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_FACTOR"));

                    b.Property<string>("RIB_FACTOR")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<bool>("VALID_RIB_FACTOR")
                        .HasColumnType("bit");

                    b.HasKey("ID_FACTOR", "RIB_FACTOR");

                    b.ToTable("T_RIB_FACTOR", (string)null);
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.T_ROLE", b =>
                {
                    b.Property<string>("ID_ROLE")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("LIB_ROLE")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("ID_ROLE")
                        .HasName("PK__T_ROLE__C7D0F6576EC0713C");

                    b.ToTable("T_ROLE", (string)null);
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.User.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", "usr");
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.User.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedClaim")
                        .HasColumnType("datetime2");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", "usr");
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.User.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FamilyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GeneratedCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", "usr");
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.User.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", "usr");
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.User.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("LoggedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", "usr");
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.User.UserRefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsValid")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserRefreshTokens", "usr");
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.User.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedUserRoleDate")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", "usr");
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.User.UserToken", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("GeneratedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", "usr");
                });

            modelBuilder.Entity("TIndividu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AbrvInd")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdrInd")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CodSclas")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CodTvaInd")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CpInd")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DatDebExo")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DatFinExo")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DatInfoInd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DatNaissCreat")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDocIdInd")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailInd")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("ExoInd")
                        .HasColumnType("bit");

                    b.Property<bool?>("ExoTva")
                        .HasColumnType("bit");

                    b.Property<string>("FaxInd")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromJurInd")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GenreInd")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("GrpInd")
                        .HasColumnType("bit");

                    b.Property<int?>("IdNldp")
                        .HasColumnType("int");

                    b.Property<string>("InfoInd")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LieuDocIdInd")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("LimCredGloInd")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("LimFinGloInd")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("MfInd")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NomInd")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumDocIdInd")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoInd")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreInd")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RcInd")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefAchInd")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefAdhInd")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TelInd")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypDocIdInd")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TIndividu");
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.Order.Order", b =>
                {
                    b.HasOne("CleanArc.Domain.Entities.User.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.TContact", b =>
                {
                    b.HasOne("TIndividu", "individu")
                        .WithMany("Contacts")
                        .HasForeignKey("individuId");

                    b.Navigation("individu");
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.TJ_CIR", b =>
                {
                    b.HasOne("CleanArc.Domain.Entities.T_ROLE", "ID_ROLE_CIRNavigation")
                        .WithMany("TJ_CIRs")
                        .HasForeignKey("ID_ROLE_CIR")
                        .IsRequired()
                        .HasConstraintName("FK_CIR_ROLE");

                    b.HasOne("CleanArc.Domain.Entities.T_CONTRAT", "REF_CTR_CIRNavigation")
                        .WithMany("TJ_CIRs")
                        .HasForeignKey("REF_CTR_CIR")
                        .IsRequired()
                        .HasConstraintName("FK_CIR_CONTRAT");

                    b.HasOne("CleanArc.Domain.Entities.T_INDIVIDU", "REF_IND_CIRNavigation")
                        .WithMany("TJ_CIRs")
                        .HasForeignKey("REF_IND_CIR")
                        .IsRequired()
                        .HasConstraintName("FK_CIR_INDIVIDU");

                    b.Navigation("ID_ROLE_CIRNavigation");

                    b.Navigation("REF_CTR_CIRNavigation");

                    b.Navigation("REF_IND_CIRNavigation");
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.TJ_GRP_PERMISSION", b =>
                {
                    b.HasOne("CleanArc.Domain.Entities.TR_LIST_VAL", "ID_PERMISSIONNavigation")
                        .WithMany("TJ_GRP_PERMISSIONs")
                        .HasForeignKey("ID_PERMISSION")
                        .IsRequired()
                        .HasConstraintName("FK_TJ_GRP_PERMISSIONS_TR_LIST_VAL");

                    b.Navigation("ID_PERMISSIONNavigation");
                });

         
            modelBuilder.Entity("CleanArc.Domain.Entities.TS_USER", b =>
                {
                    b.HasOne("CleanArc.Domain.Entities.TS_GRP_USER", "ID_GRP_USERNavigation")
                        .WithMany("TS_USERs")
                        .HasForeignKey("ID_GRP_USER")
                        .IsRequired()
                        .HasConstraintName("FK__TS_USER__ID_GRP___5C6CB6D7");

                    b.Navigation("ID_GRP_USERNavigation");
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.T_ADRESSE", b =>
                {
                    b.HasOne("CleanArc.Domain.Entities.T_INDIVIDU", "REF_IND_ADRNavigation")
                        .WithMany("T_ADRESSEs")
                        .HasForeignKey("REF_IND_ADR")
                        .IsRequired()
                        .HasConstraintName("FK__T_ADRESSE__REF_I__0662F0A3");

                    b.Navigation("REF_IND_ADRNavigation");
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.T_CALC_INT", b =>
                {
                    b.HasOne("CleanArc.Domain.Entities.T_CONTRAT", "REF_CTR_CALC_INTNavigation")
                        .WithMany("T_CALC_INTs")
                        .HasForeignKey("REF_CTR_CALC_INT")
                        .IsRequired()
                        .HasConstraintName("FK_T_CALC_INT_T_CONTRAT");

                    b.Navigation("REF_CTR_CALC_INTNavigation");
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.T_DET_BORD", b =>
                {
                    b.HasOne("CleanArc.Domain.Entities.T_CONTRAT", "REF_CTR_DET_BORDNavigation")
                        .WithMany("T_DET_BORDs")
                        .HasForeignKey("REF_CTR_DET_BORD")
                        .IsRequired()
                        .HasConstraintName("FK__T_DET_BOR__REF_C__6501FCD8");

                    b.Navigation("REF_CTR_DET_BORDNavigation");
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.User.RoleClaim", b =>
                {
                    b.HasOne("CleanArc.Domain.Entities.User.Role", "Role")
                        .WithMany("Claims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.User.UserClaim", b =>
                {
                    b.HasOne("CleanArc.Domain.Entities.User.User", "User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.User.UserLogin", b =>
                {
                    b.HasOne("CleanArc.Domain.Entities.User.User", "User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.User.UserRefreshToken", b =>
                {
                    b.HasOne("CleanArc.Domain.Entities.User.User", "User")
                        .WithMany("UserRefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.User.UserRole", b =>
                {
                    b.HasOne("CleanArc.Domain.Entities.User.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CleanArc.Domain.Entities.User.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.User.UserToken", b =>
                {
                    b.HasOne("CleanArc.Domain.Entities.User.User", "User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.TR_LIST_VAL", b =>
                {
                    b.Navigation("TJ_GRP_PERMISSIONs");
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.TS_GRP_USER", b =>
                {
                    b.Navigation("TS_USERs");
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.T_CONTRAT", b =>
                {
                    b.Navigation("TJ_CIRs");

                    b.Navigation("T_CALC_INTs");

                    b.Navigation("T_DET_BORDs");
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.T_INDIVIDU", b =>
                {
                    b.Navigation("TJ_CIRs");

                    b.Navigation("T_ADRESSEs");
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.T_ROLE", b =>
                {
                    b.Navigation("TJ_CIRs");
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.User.Role", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.User.User", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("Logins");

                    b.Navigation("Orders");

                    b.Navigation("Tokens");

                    b.Navigation("UserRefreshTokens");

                    b.Navigation("UserRoles");
                });

          
#pragma warning restore 612, 618
        }
    }
}
