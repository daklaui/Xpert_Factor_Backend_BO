// <auto-generated />
using System;
using CleanArc.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CleanArc.Domain.Entities.Order.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.TContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("ActifContact")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FaxContact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mail1Coontact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mail2Coontact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NomPreContact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PosContact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tel1Contact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tel2Contact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("individuId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("individuId");

                    b.ToTable("TContacts");
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.TGroupe", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NomGro")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TGrpUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TGrpUserId");

                    b.ToTable("TGroupes");
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.TGrpUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte>("ActifGrpUser")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdGrpUser")
                        .HasColumnType("int");

                    b.Property<string>("LibGrpUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("TGrpUsers");
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.TRib", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("ActifRib")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RibRib")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("individuId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("individuId");

                    b.ToTable("TRibs");
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.TTMM", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDateTMM")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RateTMM")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDateTMM")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("TTMMS");
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.User.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", "usr");
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.User.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedClaim")
                        .HasColumnType("datetime2");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", "usr");
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.User.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FamilyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GeneratedCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", "usr");
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.User.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", "usr");
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.User.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("LoggedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", "usr");
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.User.UserRefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsValid")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserRefreshTokens", "usr");
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.User.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedUserRoleDate")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", "usr");
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.User.UserToken", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("GeneratedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", "usr");
                });

            modelBuilder.Entity("TIndividu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AbrvInd")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdrInd")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CodSclas")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CodTvaInd")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CpInd")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DatDebExo")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DatFinExo")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DatInfoInd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DatNaissCreat")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDocIdInd")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailInd")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("ExoInd")
                        .HasColumnType("bit");

                    b.Property<bool?>("ExoTva")
                        .HasColumnType("bit");

                    b.Property<string>("FaxInd")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromJurInd")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GenreInd")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("GrpInd")
                        .HasColumnType("bit");

                    b.Property<int?>("IdNldp")
                        .HasColumnType("int");

                    b.Property<string>("InfoInd")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LieuDocIdInd")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("LimCredGloInd")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("LimFinGloInd")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("MfInd")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NomInd")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumDocIdInd")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoInd")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreInd")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RcInd")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefAchInd")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefAdhInd")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TelInd")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypDocIdInd")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TIndividus");
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.Order.Order", b =>
                {
                    b.HasOne("CleanArc.Domain.Entities.User.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.TContact", b =>
                {
                    b.HasOne("TIndividu", "individu")
                        .WithMany("Contacts")
                        .HasForeignKey("individuId");

                    b.Navigation("individu");
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.TGroupe", b =>
                {
                    b.HasOne("CleanArc.Domain.Entities.TGrpUser", "TGrpUser")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CleanArc.Domain.Entities.TGrpUser", null)
                        .WithMany("Groupe")
                        .HasForeignKey("TGrpUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TGrpUser");
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.TRib", b =>
                {
                    b.HasOne("TIndividu", "individu")
                        .WithMany("Ribs")
                        .HasForeignKey("individuId");

                    b.Navigation("individu");
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.User.RoleClaim", b =>
                {
                    b.HasOne("CleanArc.Domain.Entities.User.Role", "Role")
                        .WithMany("Claims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.User.UserClaim", b =>
                {
                    b.HasOne("CleanArc.Domain.Entities.User.User", "User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.User.UserLogin", b =>
                {
                    b.HasOne("CleanArc.Domain.Entities.User.User", "User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.User.UserRefreshToken", b =>
                {
                    b.HasOne("CleanArc.Domain.Entities.User.User", "User")
                        .WithMany("UserRefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.User.UserRole", b =>
                {
                    b.HasOne("CleanArc.Domain.Entities.User.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CleanArc.Domain.Entities.User.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.User.UserToken", b =>
                {
                    b.HasOne("CleanArc.Domain.Entities.User.User", "User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.TGrpUser", b =>
                {
                    b.Navigation("Groupe");
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.User.Role", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("CleanArc.Domain.Entities.User.User", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("Logins");

                    b.Navigation("Orders");

                    b.Navigation("Tokens");

                    b.Navigation("UserRefreshTokens");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("TIndividu", b =>
                {
                    b.Navigation("Contacts");

                    b.Navigation("Ribs");
                });
#pragma warning restore 612, 618
        }
    }
}
